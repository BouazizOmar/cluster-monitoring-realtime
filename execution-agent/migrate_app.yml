---
- name: General application migration
  hosts: all
  gather_facts: false
  tags: migrate

  vars:
    src: "{{ src }}"
    dest: "{{ dest }}"
    app_path: "{{ app_path }}"
    app_service: "{{ app_service }}"
    setup_command: "{{ setup_command }}"
    start_command: "{{ start_command }}"
    archive_name: "{{ app_service }}.tgz"
    local_archive_dir: "{{ playbook_dir }}/archives"

  tasks:
    - name: Ensure local archives directory exists
      local_action:
        module: file
        path: "{{ local_archive_dir }}"
        state: directory
        mode: "0755"

    - block:
        - name: Ensure source app directory exists
          stat:
            path: "{{ app_path }}"
          register: src_stat

        - name: Fail if source path is missing
          fail:
            msg: "{{ app_path }} not found on {{ inventory_hostname }}"
          when: not src_stat.stat.exists

        - name: Archive application on source
          become: yes
          command: tar czf "/tmp/{{ archive_name }}" -C "{{ app_path }}" .

        - name: Fetch archive to control node
          become: yes
          fetch:
            src: "/tmp/{{ archive_name }}"
            dest: "{{ local_archive_dir }}/"
            flat: yes

      when: inventory_hostname == src

    - block:
        - name: Ensure Node.js & npm are installed on dest
          become: yes
          apt:
            name:
              - nodejs
              - npm
            state: present
            update_cache: yes

        - name: Create application directory on dest
          become: yes
          file:
            path: "{{ app_path }}"
            state: directory
            owner: "{{ ansible_user }}"
            mode: '0755'

        - name: Copy archive to dest
          become: yes
          copy:
            src: "{{ local_archive_dir }}/{{ archive_name }}"
            dest: "/tmp/{{ archive_name }}"

        - name: Extract archive on dest
          become: yes
          command: tar xzf "/tmp/{{ archive_name }}" -C "{{ app_path }}"

        - name: Run setup command
          become: yes
          shell: |
            cd "{{ app_path }}" && {{ setup_command }}
          args:
            executable: /bin/bash

        - name: Deploy systemd unit
          become: yes
          template:
            src: generic.service.j2
            dest: /etc/systemd/system/{{ app_service }}.service

        - name: Reload systemd & restart service
          become: yes
          systemd:
            daemon_reload: yes
            name: "{{ app_service }}.service"
            state: restarted
            enabled: yes

      when: inventory_hostname == dest
